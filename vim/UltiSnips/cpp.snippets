snippet for
for (int ${1:i} = 0; $1 < ${2:count}; ++$1) {
	${3}
}
endsnippet

snippet ifs
std::ifstream ifs(${1:fname}.c_str(), std::ios::${2:in});
if (!ifs.good()) {
	ifs.close();
	${3:std::cerr} << "Cannot open " << $1 << " for reading\n";
	$3.flush();
	${4:return;}
}
${5}
ifs.close();
endsnippet

snippet ofs
std::ofstream ofs(${1:fname}.c_str(), std::ios::${2:out});
if (!ofs.good()) {
	ofs.close();
	${3:std::cerr} << "Cannot open " << $1 << " for writing\n";
	$3.flush();
	${4:return;}
}
${5}
ofs.close();
endsnippet

snippet tokenize
std::stringstream inputstream(${1:str});
std::vector<std::string> result;
std::string token;
while (std::getline(inputstream, token, ${2:' '})) {
	result.push_back(token);
	${3}
}
endsnippet

snippet dlopen
void *dlHandle = dlopen(${1:libfname}, RTLD_${2:NOW});
if (!dlHandle) {
	${3:std::cerr} << *dlerror() << "\n";
	${4:return;}
}
char *dlError;
typedef ${5:int} (*${6:func}_t)(${7});
#ifdef __GNUC__
// Disable gnu c extension warning for the following statement
__extension__
#endif
$6_t $6 = ($6_t)dlsym(dlHandle, "$6");
if ((dlError = dlerror()) != NULL) {
	${8:std::cerr} << "when loading $6(): " << *dlError << "\n";
	${9:return;}
}
endsnippet
